{"version":3,"sources":["./src/app/auth/create/create.component.ts","./src/app/auth/create/create.component.html","./src/app/auth/connexion/connexion.component.ts","./src/app/auth/connexion/connexion.component.html","./src/app/auth/auth.module.ts"],"names":[],"mappings":"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","file":"auth-auth-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { AuthService } from '../../core/services/auth.service';\nimport { Injectable } from '@angular/core';\nimport { IUser } from 'src/app/core/models/user.model';\nimport { AngularFirestore } from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})\n\n@Injectable()\nexport class CreateComponent implements OnInit {\n\n  public hide = true;\n\n  public profileForm = this.cr.group({\n    pseudo: ['', Validators.required],\n    email: ['', [Validators.required, Validators.email]],\n    mdp: ['', Validators.required],\n  });\n\n  constructor(private cr: FormBuilder, private firestore: AngularFirestore, private authService: AuthService) { }\n\n  public ngOnInit(): void {\n  }\n\n  public onSubmit(): void {\n    this.profileForm.markAllAsTouched();\n    if (this.profileForm.valid) {\n      let data: IUser = {email: this.profileForm.get(\"email\")?.value, pseudo: this.profileForm.get(\"pseudo\")?.value, points : 0};\n      this.firestore.collection(\"users\").add(data).then(() => {\n        window.alert(\"Votre compte a bien été créé !\");\n      }).catch((error) => {\n        window.alert(\"Erreur lors de la création du compte.\");\n      });\n      this.authService.signUp(this.profileForm.get(\"pseudo\")?.value, this.profileForm.get(\"email\")?.value, this.profileForm.get(\"mdp\")?.value);\n    }\n    else{\n      window.alert(\"Formulaire d'inscription invalide !\");\n    }\n  }\n\n}\n","<form [formGroup]=\"profileForm\">\n  <h1>Création du compte</h1>\n\n  <mat-form-field class=\"pseudo\">\n    <mat-label>Pseudo</mat-label>\n    <textarea matInput formControlName=\"pseudo\"></textarea>\n  </mat-form-field>\n  \n    <mat-form-field class=\"email\">\n      <mat-label>Adresse mail</mat-label>\n      <textarea matInput placeholder=\"Ex. pat@gmail.com\" formControlName=\"email\"></textarea>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"fill\">\n      <mat-label>Mot de passe</mat-label>\n      <input matInput formControlName=\"mdp\" [type]=\"hide ? 'password' : 'text'\">\n      <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n      <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n      </button>\n    </mat-form-field>\n\n  </form>\n\n  <button mat-flat-button class=\"ok\" type=\"submit\" color=\"primary\" (click)=\"onSubmit()\">Valider</button>\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { FormBuilder } from '@angular/forms';\nimport { Validators } from '@angular/forms';\n\nimport { AuthService } from '../../core/services/auth.service';\n\nimport { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-connexion',\n  templateUrl: './connexion.component.html',\n  styleUrls: ['./connexion.component.css']\n})\n\n@Injectable()\nexport class ConnexionComponent implements OnInit, CanActivate {\n  public hide = true;\n\n  public profileCoForm = this.co.group({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    mdp: ['', Validators.required],\n  });\n\n  constructor(private co: FormBuilder, private authService: AuthService, private router: Router) { }\n\n  public ngOnInit(): void {\n  }\n\n\n  public onSubmit(): void {\n    this.profileCoForm.markAllAsTouched();\n\n    if (this.profileCoForm.valid) {\n      this.authService.signIn(this.profileCoForm.get(\"email\")?.value, this.profileCoForm.get(\"mdp\")?.value);\n    }\n    else{\n      window.alert(\"Formulaire invalide !\");\n    }\n  }\n  public canActivate() {\n    return true;\n  }\n\n}\n","<form [formGroup]=\"profileCoForm\">\n  <h1>Connexion au compte</h1>\n\n  <mat-form-field class=\"email\">\n    <mat-label>Adresse mail</mat-label>\n    <textarea matInput placeholder=\"Ex. pat@gmail.com\" formControlName=\"email\"></textarea>\n  </mat-form-field>\n\n  <mat-form-field appearance=\"fill\">\n    <mat-label>Mot de passe</mat-label>\n    <input matInput formControlName=\"mdp\" [type]=\"hide ? 'password' : 'text'\">\n    <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n            [attr.aria-pressed]=\"hide\">\n      <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n    </button>\n  </mat-form-field>\n\n</form>\n\n<button mat-flat-button class=\"ok\" type=\"submit\" color=\"primary\" (click)=\"onSubmit()\">Valider</button>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SharedModule } from '../shared/shared.module';\nimport { ConnexionComponent } from './connexion/connexion.component';\nimport { CreateComponent } from './create/create.component';\n\nconst routes: Routes = [\n  { path: 'connexion-component', component: ConnexionComponent},\n  { path: 'create-component', component: CreateComponent},\n  {redirectTo: 'create-component', path: ''}\n];\n\n@NgModule({\n  declarations: [\n    ConnexionComponent,\n    CreateComponent,\n  ],\n  imports: [\n    SharedModule,\n    RouterModule.forChild(routes)\n  ],\n})\nexport class AuthModule { }\n"],"sourceRoot":"webpack:///"}